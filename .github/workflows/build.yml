name: Build on Push

on:
  push:
    branches:
      - main  # Adjust this if you want to trigger the workflow on other branches

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # This allows writing to the repository, needed for creating releases
      packages: write
      
    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Artifact
      id: create_artifact
      run: zip -r pack.zip pack.mcmeta data assets

    # # Step 2: Upload the folder as a build artifact NOT NEEDED
    # - name: Upload artifact
    #   id: upload_artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: pack
    #     path: ./pack.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: 'v${{ github.run_number }}'  # You can customize the tag naming
        release_name: 'Release ${{ github.run_number }}'
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # # Step 4: Download artifact NOT NEEDED
    # - name: Download artifact
    #   id: download_artifact
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: pack  # This should match the name you used in the upload step

    # - name: Display structure of downloaded files
    #   run: ls -R

    # Step 5: Upload the pack to the release
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./pack.zip  # Path to the zip file you want to upload
        asset_name: pack.zip  # The name that will be used in the release
        asset_content_type: application/zip  # Content type of the asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
